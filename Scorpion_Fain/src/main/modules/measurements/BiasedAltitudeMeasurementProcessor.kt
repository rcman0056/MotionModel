package modules.measurements

import golem.*
import golem.matrix.Matrix
import scorpion.filters.sensor.containers.Measurement
import scorpion.filters.sensor.containers.MeasurementModel

/**
 * Processor that updates an down position error state and altitude bias
 * state using a differenced down position measurement.
 */
class BiasedAltitudeMeasurementProcessor : AltitudeMeasurementProcessor{

    /**
     * Constructor.
     *
     * @param label: Processor label
     * @param pinsonLabel: Label for the pinson state block. The pinson block
     * must have the down position error state at index 2.
     * @param biasLabel: Label for the baro bias state (1x1)
     */
    constructor (label: String, pinsonLabel: String, biasLabel: String) :
    super(label, biasLabel) {
        this.stateBlockLabels = arrayOf(pinsonLabel, biasLabel)
    }


    /**
     * Appends the bias state measurement function to the Pinson
     * state measurement function generated by the super class
     * so both may be updated.
     *
     * @param meas: The differenced measurement from an altimeter, in the same
     * units as the state blocks elements being updated.
     * @param xhat: Current state vector.
     * @param P: Current covariance matrix associated with xhat.
     */
    override fun generateModel(meas: Measurement, xhat: Matrix<Double>,
                               P: Matrix<Double>): MeasurementModel {
        var model = super.generateModel(meas, xhat[0..xhat.numRows() - 2, 0], P)
        var H = hstack(model.H, mat[1.0])
        return MeasurementModel(model.z, { H * it }, H, model.R)
    }

}